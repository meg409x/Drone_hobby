#include "Wire.h" // library to communicate with I2C devices.
const int MPU_ADDR = 0x68; // 0x68 is the default I2C address of the MPU-6050.
int16_t a_x, a_y, a_z; // these are the variables used for accelerometer raw data
int16_t g_x, g_y, g_z; // these are the variables used for gyroscope raw data
float P_CompCoeff= 0.98;//complementary filter coefficient taken is 0.98
float pitch1,pitchAcc,pitch,delta_t;//declaring all variables for filter
char tmp_str[7]; //character data type is used to store variable 
                 //tmp_str[7] is the temporary variable used in convert function
char* convert_int16_to_str(int16_t i) {//char* is an array of characters, typically used as a string 
                                      //command is primarily used to convert int16 to string here
  sprintf(tmp_str, "%6d", i);         //sprintf is used to print out as many variables into the string as we want
                                      //arguments are- temporary variable,6 is the minumum number of characters to be printer 
                                      //also note that if the value printed is shorter than the number the spaces will be padded with blanked space,
                                      // i is the desired output    
  return tmp_str;//used to terminate function and return value                                   
}
void setup() {
  Serial.begin(9600);//start serial communication, so that the Arduino can send out commands through the USB connection
                     //Here 9600 is the baud rate-rate at which information in a communication channel,
                     //Note that 9600 is a pretty standard baud rate for most projects  
  Wire.begin();      //initaiate wire library
  Wire.beginTransmission(MPU_ADDR); // Transmission to the I2C slave device with the given address begins 
  Wire.write(0x6B); // sleep command from PWR_MGMT_1(register decimal 107)
  Wire.write(0); //set to zero in order to wake up the MPU-6050
  Wire.endTransmission(true);//Ends a transmission to a slave device that was begun by beginTransmission() and transmits the bytes that were queued by write()
}
//Please note: data sheet used is MPU-6000 and MPU-6050 Register Map and Descriptions Revision 4.2
void loop() {
  Wire.beginTransmission(MPU_ADDR);
  Wire.write(0x3B); // starting with register 0x3B (ACCEL_XOUT_H) [MPU-6000 and MPU-6050 Register Map and Descriptions Revision 4.2, p.40]
  Wire.endTransmission(false); // the parameter indicates that the Arduino will send a restart. As a result, the connection is kept active.
  Wire.requestFrom(MPU_ADDR, 7*2, true);  //MPU address which is a 7 bit hexadecimal , 7*2 represents quantity i.e no. of bytes to request, true   

  

  //Here are variables have been taken under Wire.read() and shifted 8 bits to the left which is equivalent to multiplying by 256
  // the reason behind doing which is that the microcontroller in our arduino is usully 8 bits and the int function itself is 16 bits 
  
  // the single pipe used represents the bitwise OR operator whose primariry function is to set multiple bits in a bit- packed number
  // it operates each bit in its surrounding independently
    
  //Here H stands for high byte and L for low byte of an internal register value 
  //ACCEL_X/Y/ZOUT represents parameter 16 bit 2's complement value storing the most recent accelerometer X/Y/Z axis measurement
  //GYRO_X/Y/ZOUT represents parameter 16 bit 2's complement value storing the most recent gyroscope X/Y/Z axis measurement  
  
  a_x = Wire.read()<<8 | Wire.read(); // reading registers: 0x3B (ACCEL_XOUT_H) and 0x3C (ACCEL_XOUT_L)
  a_y = Wire.read()<<8 | Wire.read(); // reading registers: 0x3D (ACCEL_YOUT_H) and 0x3E (ACCEL_YOUT_L)
  a_z = Wire.read()<<8 | Wire.read(); // reading registers: 0x3F (ACCEL_ZOUT_H) and 0x40 (ACCEL_ZOUT_L)
  g_x = Wire.read()<<8 | Wire.read(); // from reading registers: 0x43 (GYRO_XOUT_H) and 0x44 (GYRO_XOUT_L)
  g_y = Wire.read()<<8 | Wire.read(); // from reading registers: 0x45 (GYRO_YOUT_H) and 0x46 (GYRO_YOUT_L)
  g_z = Wire.read()<<8 | Wire.read(); // from reading registers: 0x47 (GYRO_ZOUT_H) and 0x48 (GYRO_ZOUT_L)

  
  // print out data
  Serial.print(" | aX = "); Serial.print(convert_int16_to_str(a_x));
  Serial.print(" | aY = "); Serial.print(convert_int16_to_str(a_y));
  Serial.print(" | aZ = "); Serial.print(convert_int16_to_str(a_z));
  Serial.print(" | gX = "); Serial.print(convert_int16_to_str(g_x));
  Serial.print(" | gY = "); Serial.print(convert_int16_to_str(g_y));
  Serial.print(" | gZ = "); Serial.print(convert_int16_to_str(g_z));

  // delay function pauses the program for a given amountof time (in milliseconds) 
  delay(1000);
}
void ComplementaryFilter(int a_x,int a_y,int a_z,int g_y,int g_z) {
    long filter1=(long)a_y*a_y+(long)a_z*a_z;//long data type used, filter1 is a variable
    pitch1=((-g_y/32.8f)*(delta_t/1000000.0f)); //full gyro range of 1000deg/s(source:mpu data sheet)
                                                //hence 32.8 sensitivity is taken  
    pitchAcc =atan(a_x/sqrt(filter1))*RAD_TO_DEG;//to convert radian to degree
    pitch =P_CompCoeff*pitch + (1.0f-P_CompCoeff)*pitchAcc;//formula for complimentary filter
                                                           //filter coefficient taken is 0.98
                                                           
    //print out data 
    Serial.print(pitch1);
    Serial.print(pitchAcc);
    Serial.print(pitch);
    
}
